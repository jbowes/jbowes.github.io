<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Git on My New Hugo Site</title>
    <link>http://jbowes.github.io/tags/git/</link>
    <description>Recent content in Git on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Â© 2005 - 2016 James Bowes</copyright>
    <lastBuildDate>Sat, 03 Dec 2011 10:52:00 -0400</lastBuildDate>
    <atom:link href="http://jbowes.github.io/tags/git/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Android ProGuard and Git Tip</title>
      <link>http://jbowes.github.io/2011/12/03/android-proguard-and-git-tip</link>
      <pubDate>Sat, 03 Dec 2011 10:52:00 -0400</pubDate>
      
      <guid>http://jbowes.github.io/2011/12/03/android-proguard-and-git-tip</guid>
      <description>&lt;p&gt;If you&amp;rsquo;re obfuscating your &lt;a href=&#34;http://android.com/&#34;&gt;Android&lt;/a&gt; applications using
&lt;a href=&#34;http://proguard.sourceforge.net/&#34;&gt;ProGuard&lt;/a&gt;, make sure to keep the
&lt;em&gt;proguard/&lt;/em&gt; directory at the root of your Android project under revision
control. This may seem contrary to what you&amp;rsquo;d feel like doing, as the files
are autogenerated, but it will help if you ever need to debug a stack trace
from your published application.&lt;/p&gt;

&lt;p&gt;Typically when I&amp;rsquo;m ready to release, and after I&amp;rsquo;ve done every other change, I
will bump the revision in my &lt;em&gt;AndroidManifest.xml&lt;/em&gt; and generate a new .apk
from eclipse, then test it out on my device. If everything looks good, I&amp;rsquo;ll
commit the manifest change, along with the now updated proguard directory,
with a commit message containing the release number. Then I&amp;rsquo;ll tag that commit
with the same name. This way, if that release ever has any exceptions I need
to debug, I can download the obfuscated stack trace from the Android developer
console, run &lt;em&gt;git checkout &amp;lt;TAGNAME&amp;gt;&lt;/em&gt;, and use the proguard files from
that release to deobfuscate the strack trace.&lt;/p&gt;

&lt;p&gt;Keeping the proguard files under git makes them quickly and easily accessible,
should you ever require them.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>My .gitconfig - 2011 Edition</title>
      <link>http://jbowes.github.io/2011/12/02/my-gitconfig-2011-edition</link>
      <pubDate>Fri, 02 Dec 2011 21:55:00 -0400</pubDate>
      
      <guid>http://jbowes.github.io/2011/12/02/my-gitconfig-2011-edition</guid>
      <description>&lt;p&gt;It&amp;rsquo;s been just shy of five years since I &lt;a href=&#34;http://blog.repl.ca/2006/12/my-gitconfig.html&#34;&gt;first blogged about my .gitconfig
file&lt;/a&gt;, so I figured now would
be a good time to revisit it. If you&amp;rsquo;re not already aware, you can set git
configuration values in a .gitconfig file in your home directory, and have
them apply to all &lt;a href=&#34;http://git-scm.org/&#34;&gt;git&lt;/a&gt; repositories you work on. This is
particularly useful for aliases and to set your email address.&lt;/p&gt;

&lt;p&gt;My current .gitconfig:&lt;/p&gt;

&lt;p&gt;[user]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    name = James Bowes  
    email = $EMAIL_ADDRESS  

[alias]  
    ci = commit -a  
    co = checkout  
    st = status  
    praise = blame  
    br = branch  
    diffstat = diff --stat  
    cat = !cat @  
    ds = diff --stat  
    lol = log --graph --decorate --pretty=oneline --abbrev-commit  
    lola = log --graph --decorate --pretty=oneline --abbrev-commit --all  

[apply]  
    whitespace = warn  

[diff]  
    rename = copy  
    renamelimit = 600  

[pager]  
    color = true  

[color]  
    branch = auto  
    diff = auto  
    interactive =auto  
    status = auto  

[push]  
    default = upstream  

[github]  
    user = jbowes  
    token = $GITHUB_TOKEN  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I cribbed _lol _and &lt;em&gt;lola&lt;/em&gt; from
&lt;a href=&#34;http://adrianlikins.com/2011/05/gitconfig/&#34;&gt;Adrian&lt;/a&gt;. Naturally, there&amp;rsquo;s now a
&lt;a href=&#34;http://github.com/&#34;&gt;github&lt;/a&gt; section. I get the most use out of
&lt;em&gt;diff.renamelimit&lt;/em&gt;, which helps me when I&amp;rsquo;m doing merges in large projects
like &lt;a href=&#34;http://candlepinproject.org/&#34;&gt;Candlepin&lt;/a&gt;, and the &lt;em&gt;ds&lt;/em&gt; alias, which
gives me a good overview of how much work I&amp;rsquo;ve done prior to a commit.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Graphing Git Repository Activity In ASCII</title>
      <link>http://jbowes.github.io/2008/05/24/graphing-git-repository-activity-in</link>
      <pubDate>Sat, 24 May 2008 08:15:00 -0300</pubDate>
      
      <guid>http://jbowes.github.io/2008/05/24/graphing-git-repository-activity-in</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://jbowes.dangerouslyinc.com/wp-
content/uploads/2008/05/git-graph.pl&#34;&gt;Here&amp;rsquo;s a quick little script&lt;/a&gt; I wrote up (adapted from &lt;a href=&#34;http://www.perlmonks.org/?node_id=336907&#34;&gt;this perlmonks
post&lt;/a&gt;) to show
&lt;a href=&#34;http://git.or.cz&#34;&gt;git&lt;/a&gt; repository activity as an ascii graph, like so:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://jbowes.files.wordpress.com/2008/05/screenshot-
git-graphpl.png&#34; alt=&#34;git-graph screenshot&#34; /&gt;The X axis represents a day, with the current day being on the
far right. The Y axis is no. of lines added + no. of lines deleted during that
day.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;EDIT (2009/02/03):&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Wordpress.com won&amp;rsquo;t let me attach a .pl file, so here&amp;rsquo;s the contents:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/bin/perl  
#  
# git-graph.pl - Generate an ascii graph of git repository activity  
#  
# Copyright (C) 2008 James Bowes &amp;lt;jbowes@dangerouslyinc.com&amp;gt;  
#  
# Graphing routine Adapted from http://www.perlmonks.org/?node_id=336907  

sub get_activity {  
    my $day = shift;  
    my $git_cmd = &#39;git diff --shortstat &amp;quot;@{&#39; . ($day + 1) .&#39; day ago}&amp;quot; &amp;quot;@{&#39; .  
                  ($day or &amp;quot;0&amp;quot;) . &#39; day ago}&amp;quot;&#39;;  
    $res = `$git_cmd 2&amp;gt; /dev/null`;  

    $res =~ /, (.*?) insertions\(\+\), (.*?) deletions\(-\)/;  
    $activity = $1 + $2;  

    return $activity;  
}  

@deltas = ();  
foreach $day (0..70) {  
    push (@deltas, get_activity ($day));  
}  

print (&amp;quot;\n&amp;quot;);  
print graph(@deltas);  
print (&amp;quot;\n&amp;quot;);  

sub graph {  
  my( $i, $magic, $m, $p, $top, @g ) = ( 0, 20, 7, 70, 0, () );  

  foreach $pad (0..($p - scalar(@_))) {  
      push (@_, 0);  
  }  

  @_ = reverse @_;   

  for (0..($p)) {  
      $top = ($top &amp;gt; $_[$_]) ? $top : $_[$_];  
  }  

  $top = $top - ($top % 100) + 100;  

  my $s = $top &amp;gt; $magic ? ( $top / $magic ) : 1;  ### calculate scale  

  for (0..$magic) {  
    $g[$_] = sprintf(&amp;quot;%&amp;quot; . ($m - 1) . &amp;quot;d |&amp;quot;, $_ * $s) .  
             ($_ % 5 == 0 ? &#39;_&#39; : &#39; &#39;) x ($p);  
    for $i (0..($p)) {  
        substr($g[$_], ($i + $m), 1) = &#39;#&#39; if ($_[$i] / $s) &amp;gt; $_;  
    }  
  }  
  join( &amp;quot;\n&amp;quot;, reverse( @g ), &#39; Date:  &#39; . &#39;^^^^^^|&#39; x ( $p / 7 ));    
}  # end sub graph  

__END__
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>git bisect: A practical example with yum</title>
      <link>http://jbowes.github.io/2007/02/18/git-bisect-practical-example-with-yum</link>
      <pubDate>Sun, 18 Feb 2007 16:59:00 -0400</pubDate>
      
      <guid>http://jbowes.github.io/2007/02/18/git-bisect-practical-example-with-yum</guid>
      <description>&lt;p&gt;I used &lt;a href=&#34;http://www.kernel.org/pub/software/scm/git/docs/git-
bisect.html&#34;&gt;git bisect&lt;/a&gt; to track down a bug in &lt;a href=&#34;http://linux.duke.edu/projects/yum/&#34;&gt;yum&lt;/a&gt;
last night. It was so easy and practical that I figured I should record it
here, so that others might want to give git a try.&lt;/p&gt;

&lt;p&gt;I was attempting to install &lt;a href=&#34;http://www.mutt.org/&#34;&gt;mutt&lt;/a&gt;, and yum failed
(printing a traceback) after the rpms had been downloaded, but before the test
transaction finished. So I started git bisect, and marked the current point as
bad:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$&amp;gt; git bisect start  
$&amp;gt; git bisect bad  
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The yum 3.1.0 release didn&amp;rsquo;t have this bug (it was the version I had installed
at the time), so I marked it as good:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$&amp;gt; git bisect good yum-3-1-0  
Bisecting: 15 revisions left to test after this  
[1d0454af41ef6361604cafa8c7a13d80bc183c63] make it so that we see that the
local rpm is present and then don&#39;t download  
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://git.or.cz&#34;&gt;Git&lt;/a&gt; automatically checks out the next revision for you to
test. This one happened to be good, so I marked it as such. I continued to
test and mark revisions as either good or bad, until:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$&amp;gt; git bisect bad  
832814e6b037621c4f26ee6a47e4b7b6dc7eb073 is first bad commit  
commit 832814e6b037621c4f26ee6a47e4b7b6dc7eb073  
Author: XXX  
Date: XXX  
XXXXXXXXXXXXXXXX  
:100644 100644 8ea07cda8441687da2f0e3dd794c3a1c50a0f161
567ef25557eacbd932bc5f8c20cd34e49c169f57 M cli.py  
:100644 100644 50fb320c9c31a0f394985e244dc35b9766fb28ce
3875b70c4f8a7b6a9cf7d06de6df47e8a0ae5777 M yum-updatesd.py  
:040000 040000 28296caad31015e1573b19dd84d12c2e3db2b90b
98048391465ca3da06c210d6f45c3f234dc12e0a M yum  
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;At this point, with the traceback and the diff from the commit, it was easy
enough figure out what the problem was, and commit a fix.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Did I mention that svn sucks?</title>
      <link>http://jbowes.github.io/2007/02/11/did-i-mention-that-svn-sucks</link>
      <pubDate>Sun, 11 Feb 2007 08:46:00 -0400</pubDate>
      
      <guid>http://jbowes.github.io/2007/02/11/did-i-mention-that-svn-sucks</guid>
      <description>&lt;p&gt;&lt;code&gt;$&amp;gt; svn co svn://gcc.gnu.org/svn/gcc/trunk gcc  
$&amp;gt; cd gcc  
$&amp;gt; du -h  
...  
1.6G .  
$&amp;gt; svn export . ../clean-gcc  
$&amp;gt; cd ../clean-gcc  
$&amp;gt; du -h  
...  
638M .  
$&amp;gt;  
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Oh, yes, &lt;a href=&#34;http://jbowes.dangerouslyinc.com/2006/11/18/software-
configuration-management/&#34;&gt;I did&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Giving back to git</title>
      <link>http://jbowes.github.io/2007/02/05/giving-back-to-git</link>
      <pubDate>Mon, 05 Feb 2007 16:38:00 -0400</pubDate>
      
      <guid>http://jbowes.github.io/2007/02/05/giving-back-to-git</guid>
      <description>&lt;p&gt;It must be obvious from &lt;a href=&#34;http://jbowes.dangerouslyinc.com/2007/01/26
/git-rebase-keeping-your-branches-current/&#34; title=&#34;keeping your branches current&#34;&gt;previous&lt;/a&gt;
&lt;a href=&#34;http://jbowes.dangerouslyinc.com/2006/12/19/my-gitconfig/&#34; title=&#34;My
.gitconfig&#34;&gt;posts&lt;/a&gt; that I love &lt;a href=&#34;http://git.or.cz&#34; title=&#34;Git Homepage&#34;&gt;git&lt;/a&gt;. Tonight I
sent a &lt;a href=&#34;http://permalink.gmane.org/gmane.comp.version-
control.git/38800&#34;&gt;patch&lt;/a&gt; to the &lt;a href=&#34;http://git.or.cz/#community&#34;&gt;mailing list&lt;/a&gt;. It&amp;rsquo;s
small and simple; it lets you save options for cvsimport in your config file,
rather than supplying them each time you run it.&lt;/p&gt;

&lt;p&gt;Hopefully it will be of use to others.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>My .gitconfig</title>
      <link>http://jbowes.github.io/2006/12/19/my-gitconfig</link>
      <pubDate>Tue, 19 Dec 2006 13:16:00 -0400</pubDate>
      
      <guid>http://jbowes.github.io/2006/12/19/my-gitconfig</guid>
      <description>&lt;p&gt;**Update: **&lt;em&gt;I&amp;rsquo;ve posted a revised version of my .gitconfig &lt;a href=&#34;http://http//blog.repl.ca/2011/12/my-gitconfig-2011-edition.html&#34;&gt;here.&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;By default, git does not include aliases for commands. For instance,&lt;br /&gt;
&amp;lsquo;git status&amp;rsquo; works but &amp;lsquo;git st&amp;rsquo; does not. This will hurt your noggin if you
are&lt;br /&gt;
used to using cvs or svn.&lt;br /&gt;
Also, the internet is for posting config files on.&lt;br /&gt;
So here are the contents of my .gitconfig:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[user]  
    name = James Bowes  
    email = MY_EMAIL  

[alias]  
    ci = commit -a  
    co = checkout  
    st = status -a  
    praise = blame  

[apply]  
    whitespace = strip  

[diff]  
    color = auto  
    rename = copy  

[pager]  
    color = true  

[status]  
    color = auto
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Just drop that into ~/.gitconfig and you&amp;rsquo;re all set. Also, use your own name&lt;br /&gt;
and email address.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>