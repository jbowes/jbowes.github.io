<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ssl on My New Hugo Site</title>
    <link>http://jbowes.github.io/tags/ssl/</link>
    <description>Recent content in Ssl on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 13 Jul 2012 14:01:00 -0300</lastBuildDate>
    <atom:link href="http://jbowes.github.io/tags/ssl/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Give the absolute path for a client certificate with curl</title>
      <link>http://jbowes.github.io/2012/07/13/give-absolute-path-for-client</link>
      <pubDate>Fri, 13 Jul 2012 14:01:00 -0300</pubDate>
      
      <guid>http://jbowes.github.io/2012/07/13/give-absolute-path-for-client</guid>
      <description>&lt;p&gt;If you&amp;rsquo;re expecting &lt;em&gt;curl &amp;ndash;cert somefile.pem&lt;/em&gt; to work, and you keep getting
403s in response, it might be because your curl is compiled against NSS, and
that cert is being interpreted as an alias to an NSS DB entry. Use &lt;em&gt;curl
&amp;ndash;cert ./somefile.pem&lt;/em&gt; instead. Fwiw, this is documented in the curl man page,
but who looks there?&lt;/p&gt;

&lt;p&gt;&amp;hellip;Or use wget instead.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A CONNECT Client Implementation for Netty</title>
      <link>http://jbowes.github.io/2012/04/24/connect-client-implementation-for-netty</link>
      <pubDate>Tue, 24 Apr 2012 10:23:00 -0300</pubDate>
      
      <guid>http://jbowes.github.io/2012/04/24/connect-client-implementation-for-netty</guid>
      <description>&lt;p&gt;If you need an implementation of an &lt;a href=&#34;https://tools.ietf.org/html/rfc2616#section-9.9&#34;&gt;HTTP
CONNECT&lt;/a&gt; client to tunnel SSL
(or anything else) through a proxy using &lt;a href=&#34;http://netty.io/&#34;&gt;Netty&lt;/a&gt;, Chris
Duryee and I recently landed a patch to do so in
&lt;a href=&#34;https://fedorahosted.org/candlepin/wiki/thumbslug/Index&#34;&gt;Thumbslug&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;By all means, make use of it!&lt;/p&gt;

&lt;p&gt;The original changeset is &lt;a href=&#34;http://git.fedorahosted.org/git/?p=thumbslug.
git;a=commit;h=813697226726ababafa7fcd6eabcfd2c610f9779&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A PEM Backed Keystore for Java SSL</title>
      <link>http://jbowes.github.io/2011/11/24/pem-backed-keystore-for-java-ssl</link>
      <pubDate>Thu, 24 Nov 2011 12:49:00 -0400</pubDate>
      
      <guid>http://jbowes.github.io/2011/11/24/pem-backed-keystore-for-java-ssl</guid>
      <description>&lt;p&gt;For &lt;a href=&#34;https://fedorahosted.org/candlepin/wiki/thumbslug/Index&#34;&gt;Thumbslug&lt;/a&gt;, we
needed to open a number of &lt;a href=&#34;http://en.wikipedia.org/wiki/SSL&#34;&gt;SSL&lt;/a&gt; connections
to the same server, each with its own
&lt;a href=&#34;http://en.wikipedia.org/wiki/X.509&#34;&gt;X.509&lt;/a&gt; client certificate. Thumbslug
grabs the certificates from &lt;a href=&#34;http://candlepinproject.org/&#34;&gt;Candlepin&lt;/a&gt;, which
stores them in
&lt;a href=&#34;http://en.wikipedia.org/wiki/X.509#Certificate_filename_extensions&#34;&gt;PEM&lt;/a&gt;
format. Rather than teach Candlepin to also store these certificates in a
different format, or to load them first into a format that Java deals with
nativley (like &lt;a href=&#34;http://en.wikipedia.org/wiki/PKCS12&#34;&gt;PKCS #12&lt;/a&gt;), I figured it
would be best to create an SSLSession backed directly by an X509Certificate
and PrivateKey loaded from the PEM file.&lt;/p&gt;

&lt;p&gt;I wasn&amp;rsquo;t able to find any other examples of a PEM backed Java KeyStore, so
&lt;a href=&#34;http://git.fedorahosted.org/git?p=thumbslug.git;a=blob_plain;f=
src/main/java/org/candlepin/thumbslug/ssl/PEMx509KeyManager.java;hb=HEAD&#34;&gt;here is mine&lt;/a&gt;
(&lt;a href=&#34;https://gist.github.com/1391823&#34;&gt;backup&lt;/a&gt;), and the &lt;a href=&#34;http:
//git.fedorahosted.org/git?p=thumbslug.git;a=blob;f=src/main/java/org/candlepi
n/thumbslug/ssl/SslContextFactory.java;h=b8791e0b4910c2f1adf347015df5110b2f6ac
9bb;hb=HEAD#l102&#34;&gt;code that uses it&lt;/a&gt; (&lt;a href=&#34;https://gist.github.com/1391824&#34;&gt;backup&lt;/a&gt;). Since PEM is
still widely used (by OpenSSL, for example), hopefully others can make use of
this.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Python Holy Grail</title>
      <link>http://jbowes.github.io/2007/08/27/python-holy-grail</link>
      <pubDate>Mon, 27 Aug 2007 08:34:00 -0300</pubDate>
      
      <guid>http://jbowes.github.io/2007/08/27/python-holy-grail</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://mail.python.org/pipermail/python-
checkins/2007-August/061867.html&#34;&gt;This checkin&lt;/a&gt; to &lt;a href=&#34;http://www.python.org&#34;&gt;python&lt;/a&gt; brings a
long-awaited (and sorely needed, IMO) enhancement to python: SSL certificate
verification support. Once the API support percolates up from socket through
the various network libraries in python proper, for the vast majority of
developers there will no longer be a need for
&lt;a href=&#34;http://pyopenssl.sourceforge.net/&#34;&gt;PyOpenSSL&lt;/a&gt;,
&lt;a href=&#34;http://chandlerproject.org/Projects/MeTooCrypto&#34;&gt;M2Crypto&lt;/a&gt;, or
&lt;a href=&#34;http://rhn.redhat.com&#34;&gt;rhnlib&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>