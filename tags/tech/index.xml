<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tech on My New Hugo Site</title>
    <link>http://jbowes.github.io/tags/tech/</link>
    <description>Recent content in Tech on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 04 Aug 2013 21:53:00 -0300</lastBuildDate>
    <atom:link href="http://jbowes.github.io/tags/tech/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Buckler v1.0.0</title>
      <link>http://jbowes.github.io/2013/08/04/buckler-v100</link>
      <pubDate>Sun, 04 Aug 2013 21:53:00 -0300</pubDate>
      
      <guid>http://jbowes.github.io/2013/08/04/buckler-v100</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://b.repl.ca/v1/use-buckler-blue.png&#34; alt=&#34;&#34; /&gt;&lt;img src=&#34;http://b.repl.ca/v1/License-
MIT-
red.png&#34; alt=&#34;&#34; /&gt;&lt;img src=&#34;http://b.repl.ca/v1/go-1.1.1-yellow.png&#34; alt=&#34;&#34; /&gt;&lt;img src=&#34;http://b.repl.ca/v1
/enterprise-ready-ff69b4.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/jbowes/buckler&#34;&gt;Buckler&lt;/a&gt; is
&lt;a href=&#34;https://github.com/olivierlacan/shields&#34;&gt;Shields&lt;/a&gt; as a Service (ShaaS, or
alternatively, Badges as a Service) for use in GitHub READMEs, or anywhere
else. Use Buckler with your favorite continuous integration tool, performance
monitoring service API, or ridiculous in-joke to surface information.&lt;/p&gt;

&lt;p&gt;Buckler is MIT licensed. You are free to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Host your own version of Buckler.&lt;/li&gt;
&lt;li&gt;Download and re-serve generated shields.&lt;/li&gt;
&lt;li&gt;Link directly to &lt;a href=&#34;http://b.repl.ca/&#34;&gt;b.repl.ca&lt;/a&gt; for static information display (eg licensing details).&lt;/li&gt;
&lt;li&gt;Redirect to &lt;a href=&#34;http://b.repl.ca/&#34;&gt;b.repl.ca&lt;/a&gt; from another service for dynamic information (eg build status).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Check out the &lt;a href=&#34;https://github.com/jbowes/buckler#api&#34;&gt;API &lt;/a&gt;on GitHub, view the
&lt;a href=&#34;https://github.com/jbowes/buckler/blob/master/README.md&#34;&gt;README&lt;/a&gt; for more
examples, or play around with the simple form on
&lt;a href=&#34;http://b.repl.ca/&#34;&gt;b.repl.ca&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Squeezebox Server &amp; Fedora</title>
      <link>http://jbowes.github.io/2012/12/16/squeezebox-server-fedora</link>
      <pubDate>Sun, 16 Dec 2012 19:33:00 -0400</pubDate>
      
      <guid>http://jbowes.github.io/2012/12/16/squeezebox-server-fedora</guid>
      <description>&lt;p&gt;To get squeezeboxserver working on Fedora, add the following to
&lt;em&gt;/etc/sysconfig/iptables&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# squeezebox  
-A INPUT -m state --state NEW -m tcp -p tcp --dport 9000 -j ACCEPT  
-A INPUT -m state --state NEW -m tcp -p tcp --dport 3483 -j ACCEPT  
-A INPUT -m state --state NEW -m udp -p udp --dport 3483 -j ACCEPT  
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>IRSSI Keys on a MacBook Pro</title>
      <link>http://jbowes.github.io/2012/12/15/irssi-keys-on-macbook-pro</link>
      <pubDate>Sat, 15 Dec 2012 13:23:00 -0400</pubDate>
      
      <guid>http://jbowes.github.io/2012/12/15/irssi-keys-on-macbook-pro</guid>
      <description>&lt;p&gt;At &lt;a href=&#34;http://www.goinstant.com/&#34;&gt;$newjob&lt;/a&gt; I&amp;rsquo;m using a late 2011 MacBook Pro, so
I&amp;rsquo;ve had to relearn some keys for &lt;a href=&#34;http://www.irssi.org/&#34;&gt;IRSSI&lt;/a&gt;. The
important ones to me are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;fn + up arrow / down arrow: for viewing the backscroll (page up / page down)&lt;/li&gt;
&lt;li&gt;Setting an option key to &amp;ldquo;+esc&amp;rdquo; under iTerm2 so I can hold down the key and use left and right arrows to move through open windows.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Micro USB for Power Everywhere</title>
      <link>http://jbowes.github.io/2012/01/21/micro-usb-for-power-everywhere</link>
      <pubDate>Sat, 21 Jan 2012 18:59:00 -0400</pubDate>
      
      <guid>http://jbowes.github.io/2012/01/21/micro-usb-for-power-everywhere</guid>
      <description>&lt;p&gt;One of the reasons I&amp;rsquo;m very excited for  &lt;a href=&#34;http://www.raspberrypi.org/&#34;&gt;Rasberry
Pi&lt;/a&gt; is that it uses &lt;a href=&#34;http://en.wikipedia.org/wiki/USB#Mini_and_Micro_connectors&#34;&gt;micro
USB&lt;/a&gt; for power.
This is also the standard may cell phone manufacturers are &lt;a href=&#34;http://news.bbc.co.uk/2/hi/technology/7894763.stm?lss&#34;&gt;settling
on&lt;/a&gt; for charging. I
would love to see more every day devices use micro USB for charging and for
power. Granted, not all devices can run off the 100mA from USB 2.0 (or charge
at a reasonable rate), but I can eliminate just one more of those odd coaxial
chargers, I&amp;rsquo;d be a happy fellow.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Essential Gnome Shell Extensions For Laggards</title>
      <link>http://jbowes.github.io/2011/12/06/essential-gnome-shell-extensions-for</link>
      <pubDate>Tue, 06 Dec 2011 18:57:00 -0400</pubDate>
      
      <guid>http://jbowes.github.io/2011/12/06/essential-gnome-shell-extensions-for</guid>
      <description>

&lt;p&gt;[&lt;img src=&#34;http://upload.wikimedia.org/wikipedia/commons/6/6f/Terminal-dec-
vt100.jpg&#34; alt=&#34;&#34; /&gt;](&lt;a href=&#34;http://upload.wikimedia.org/wikipedia/commons/6/6f/Terminal-dec-&#34;&gt;http://upload.wikimedia.org/wikipedia/commons/6/6f/Terminal-dec-&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;vt100-jpg:4f4d6a7113c2000dd0ed3450e9f6370c&#34;&gt;vt100.jpg)&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;My ideal workstation&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;__Image by &lt;a href=&#34;http://commons.wikimedia.org/wiki/User:ClickRick&#34;&gt;ClickPick&lt;/a&gt;, used
under the ____&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Creative Commons&lt;/em&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;&lt;em&gt;&lt;a href=&#34;http://creativecommons.org/licenses/by-sa/3.0/deed.en&#34;&gt;Attribution-Share Alike 3.0 Unported
license.&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;__&lt;br /&gt;
Gnome 3 introduced a lot of fundamental changes to how you interact with your
computer. I don&amp;rsquo;t want to hopelessly cling to the past, bemoaning the loss of
my &lt;a href=&#34;http://en.wikipedia.org/wiki/Sawfish_(window_manager)&#34;&gt;Lisp based window
manager&lt;/a&gt; and yearning
for the days when I could debate the merits of pure applets vs notification
area icons, so I&amp;rsquo;ve moved on to gnome-shell.&lt;/p&gt;

&lt;p&gt;That said, I&amp;rsquo;ve been using a few tweaks to bring Gnome 3 and gnome-shell
closer to what I&amp;rsquo;m used to. Consider them training wheels; they can be
disabled over time, easing the transition.&lt;/p&gt;

&lt;p&gt;Here are the extensions I use, and some settings tweaks. Most extensions are
available from &lt;a href=&#34;http://extensions.gnome.org/&#34;&gt;http://extensions.gnome.org&lt;/a&gt;.
The ones that aren&amp;rsquo;t can typically be downloaded via your distro&amp;rsquo;s packaging
mechanism of choice, then symlinked into &lt;em&gt;~/.local/share/gnome-
shell/extensions&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;**&lt;a href=&#34;https://extensions.gnome.org/extension/38/&#34;&gt;Windows Alt Tab&lt;/a&gt; **Makes alt-tab cycle through all open windows, rather than all open applications. This is really useful if you have a lot of terminal windows open.&lt;/p&gt;

&lt;p&gt;**&lt;a href=&#34;https://extensions.gnome.org/extension/40/&#34;&gt;Status Only Icon&lt;/a&gt; **Remove your name from the top panel. You know who you are, and you don&amp;rsquo;t care to let strangers in the coffee shop find out.&lt;/p&gt;

&lt;p&gt;**&lt;a href=&#34;https://extensions.gnome.org/extension/14/&#34;&gt;Frippery Shut Down Menu&lt;/a&gt; **Replaces the suspend menu option shut down. Perfect for a workstation that is turned off at the end of the day.&lt;/p&gt;

&lt;p&gt;**Remove Accessibility Icon **_(Not available on extensions.gnome.org) _I think it&amp;rsquo;s wonderful how prominent the accessibility icon is in Gnome 3. It should always be out and visible by default, but since I don&amp;rsquo;t need it, I&amp;rsquo;ve removed it from my desktop.&lt;/p&gt;

&lt;p&gt;**&lt;a href=&#34;https://extensions.gnome.org/extension/3/&#34;&gt;Frippery Bottom Panel&lt;/a&gt; **A bottom panel with a list of open windows and workspaces. This is probably the first training wheel I&amp;rsquo;ll drop, as the gnome-shell overview thingy gives a good view of my open windows and workspaces.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://extensions.gnome.org/extension/12/&#34;&gt;&lt;strong&gt;Frippery Static Workspaces&lt;/strong&gt;&lt;/a&gt;
Works in conjunction with the number of workspaces you set via the Frippery
Bottom Panel, to keep them open even if no windows are present on the
workspace. This extension is my favorite. I find it very disorienting when the
webbrowser on workspace one crashes, then all of a sudden my 9 terminals are
on workspace 2 instead of workspace 3. Then I spend the next 15 minutes
juggling windows to get everything back to the workspaces they belong on.
Previously I&amp;rsquo;d open a terminal on all workspaces, just so that if another
application crashed, the workspace would remain open.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Classic Multi-Monitor Support&lt;/strong&gt; gnome-shell&amp;rsquo;s default multi-monitor support, where only your primary monitor has more than one workspace, and the content on the other monitors is always pinned in place, is not to my liking. You can get the _OG _multi-monitor style back by running:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gconftool-2 -s /desktop/gnome/shell/windows/workspaces_only_on_primary --type bool false
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Minimize/Maxmize Buttons&lt;/strong&gt; Useful with the Frippery Bottom Panel. Get them back by running:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gconftool-2 -s /desktop/gnome/shell/windows/button_layout --type string &amp;quot;:minimize,maximize,close&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;**No IM Integration **This last item I &lt;em&gt;wish&lt;/em&gt; I had. I find the popup notifications on incoming instant messages to be very distracting and disrupting, yet I still want to leave my IM status as online. If anyone knows how I can keep using empathy for IM, and yet not have any IM integration in Gnome 3, please leave me a comment!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Android ProGuard and Git Tip</title>
      <link>http://jbowes.github.io/2011/12/03/android-proguard-and-git-tip</link>
      <pubDate>Sat, 03 Dec 2011 10:52:00 -0400</pubDate>
      
      <guid>http://jbowes.github.io/2011/12/03/android-proguard-and-git-tip</guid>
      <description>&lt;p&gt;If you&amp;rsquo;re obfuscating your &lt;a href=&#34;http://android.com/&#34;&gt;Android&lt;/a&gt; applications using
&lt;a href=&#34;http://proguard.sourceforge.net/&#34;&gt;ProGuard&lt;/a&gt;, make sure to keep the
&lt;em&gt;proguard/&lt;/em&gt; directory at the root of your Android project under revision
control. This may seem contrary to what you&amp;rsquo;d feel like doing, as the files
are autogenerated, but it will help if you ever need to debug a stack trace
from your published application.&lt;/p&gt;

&lt;p&gt;Typically when I&amp;rsquo;m ready to release, and after I&amp;rsquo;ve done every other change, I
will bump the revision in my &lt;em&gt;AndroidManifest.xml&lt;/em&gt; and generate a new .apk
from eclipse, then test it out on my device. If everything looks good, I&amp;rsquo;ll
commit the manifest change, along with the now updated proguard directory,
with a commit message containing the release number. Then I&amp;rsquo;ll tag that commit
with the same name. This way, if that release ever has any exceptions I need
to debug, I can download the obfuscated stack trace from the Android developer
console, run &lt;em&gt;git checkout &amp;lt;TAGNAME&amp;gt;&lt;/em&gt;, and use the proguard files from
that release to deobfuscate the strack trace.&lt;/p&gt;

&lt;p&gt;Keeping the proguard files under git makes them quickly and easily accessible,
should you ever require them.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>My .gitconfig - 2011 Edition</title>
      <link>http://jbowes.github.io/2011/12/02/my-gitconfig-2011-edition</link>
      <pubDate>Fri, 02 Dec 2011 21:55:00 -0400</pubDate>
      
      <guid>http://jbowes.github.io/2011/12/02/my-gitconfig-2011-edition</guid>
      <description>&lt;p&gt;It&amp;rsquo;s been just shy of five years since I &lt;a href=&#34;http://blog.repl.ca/2006/12/my-gitconfig.html&#34;&gt;first blogged about my .gitconfig
file&lt;/a&gt;, so I figured now would
be a good time to revisit it. If you&amp;rsquo;re not already aware, you can set git
configuration values in a .gitconfig file in your home directory, and have
them apply to all &lt;a href=&#34;http://git-scm.org/&#34;&gt;git&lt;/a&gt; repositories you work on. This is
particularly useful for aliases and to set your email address.&lt;/p&gt;

&lt;p&gt;My current .gitconfig:&lt;/p&gt;

&lt;p&gt;[user]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    name = James Bowes  
    email = $EMAIL_ADDRESS  

[alias]  
    ci = commit -a  
    co = checkout  
    st = status  
    praise = blame  
    br = branch  
    diffstat = diff --stat  
    cat = !cat @  
    ds = diff --stat  
    lol = log --graph --decorate --pretty=oneline --abbrev-commit  
    lola = log --graph --decorate --pretty=oneline --abbrev-commit --all  

[apply]  
    whitespace = warn  

[diff]  
    rename = copy  
    renamelimit = 600  

[pager]  
    color = true  

[color]  
    branch = auto  
    diff = auto  
    interactive =auto  
    status = auto  

[push]  
    default = upstream  

[github]  
    user = jbowes  
    token = $GITHUB_TOKEN  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I cribbed _lol _and &lt;em&gt;lola&lt;/em&gt; from
&lt;a href=&#34;http://adrianlikins.com/2011/05/gitconfig/&#34;&gt;Adrian&lt;/a&gt;. Naturally, there&amp;rsquo;s now a
&lt;a href=&#34;http://github.com/&#34;&gt;github&lt;/a&gt; section. I get the most use out of
&lt;em&gt;diff.renamelimit&lt;/em&gt;, which helps me when I&amp;rsquo;m doing merges in large projects
like &lt;a href=&#34;http://candlepinproject.org/&#34;&gt;Candlepin&lt;/a&gt;, and the &lt;em&gt;ds&lt;/em&gt; alias, which
gives me a good overview of how much work I&amp;rsquo;ve done prior to a commit.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>BTRFS and KVM</title>
      <link>http://jbowes.github.io/2011/11/30/btrfs-and-kvm</link>
      <pubDate>Wed, 30 Nov 2011 22:06:00 -0400</pubDate>
      
      <guid>http://jbowes.github.io/2011/11/30/btrfs-and-kvm</guid>
      <description>&lt;p&gt;If you&amp;rsquo;re like me, you&amp;rsquo;ve spend the last year wondering why your KVM based
virtualization is horribly slow when doing IO. You&amp;rsquo;ve tried twiddling every
available option in your BIOS, you&amp;rsquo;ve mucked about with hdparm  and
libvirt/qemu settings, and you&amp;rsquo;ve run more timed installs of &lt;a href=&#34;http://www.redhat.com/rhel/&#34;&gt;RHEL
5&lt;/a&gt; than you care to admit.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re also like me, you tried using ext4 instead of BTRFS to store your
guest images today, and found that this resolved your issue.&lt;/p&gt;

&lt;p&gt;The relevant bz appears to be
&lt;a href=&#34;https://bugzilla.redhat.com/show_bug.cgi?id=689127&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The lesson I learned today is to blame experimental or newer features before
anything else (though its doubtful I&amp;rsquo;ll remember this next time).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Importing VPN Settings in GNOME 3</title>
      <link>http://jbowes.github.io/2011/11/28/importing-vpn-settings-in-gnome-3</link>
      <pubDate>Mon, 28 Nov 2011 09:47:00 -0400</pubDate>
      
      <guid>http://jbowes.github.io/2011/11/28/importing-vpn-settings-in-gnome-3</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve noticed after upgrading my workstation to Fedora 16 that GNOME 3&amp;rsquo;s
default NetworkManager UI doesn&amp;rsquo;t expose the old UI&amp;rsquo;s import option for VPN
settings. I have my old OpenVPN settings file on hand, so I&amp;rsquo;d rather not type
it out again.&lt;/p&gt;

&lt;p&gt;Turns out you can still access the old UI and its convenient import button by
running &lt;em&gt;nm-connection-editor.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CPSN v0.8.0</title>
      <link>http://jbowes.github.io/2011/11/25/cpsn-v080</link>
      <pubDate>Fri, 25 Nov 2011 21:01:00 -0400</pubDate>
      
      <guid>http://jbowes.github.io/2011/11/25/cpsn-v080</guid>
      <description>&lt;p&gt;This is just a quick update to CPSN, fixing detection of stale cookies. It
will also prompt you for a username and password if you forget to put one in
the settings file (or don&amp;rsquo;t want to save your password on disk).&lt;/p&gt;

&lt;p&gt;Install it with gem install &amp;ndash;user cpsn&lt;br /&gt;
Check the included README for details on configuration.&lt;/p&gt;

&lt;p&gt;Git: &lt;a href=&#34;https://github.com/jbowes/cpsn&#34;&gt;https://github.com/jbowes/cpsn&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Note:&lt;/strong&gt; Using CPSN probably violates any number of Terms of Service, etc.
Use at your own risk.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A PEM Backed Keystore for Java SSL</title>
      <link>http://jbowes.github.io/2011/11/24/pem-backed-keystore-for-java-ssl</link>
      <pubDate>Thu, 24 Nov 2011 12:49:00 -0400</pubDate>
      
      <guid>http://jbowes.github.io/2011/11/24/pem-backed-keystore-for-java-ssl</guid>
      <description>&lt;p&gt;For &lt;a href=&#34;https://fedorahosted.org/candlepin/wiki/thumbslug/Index&#34;&gt;Thumbslug&lt;/a&gt;, we
needed to open a number of &lt;a href=&#34;http://en.wikipedia.org/wiki/SSL&#34;&gt;SSL&lt;/a&gt; connections
to the same server, each with its own
&lt;a href=&#34;http://en.wikipedia.org/wiki/X.509&#34;&gt;X.509&lt;/a&gt; client certificate. Thumbslug
grabs the certificates from &lt;a href=&#34;http://candlepinproject.org/&#34;&gt;Candlepin&lt;/a&gt;, which
stores them in
&lt;a href=&#34;http://en.wikipedia.org/wiki/X.509#Certificate_filename_extensions&#34;&gt;PEM&lt;/a&gt;
format. Rather than teach Candlepin to also store these certificates in a
different format, or to load them first into a format that Java deals with
nativley (like &lt;a href=&#34;http://en.wikipedia.org/wiki/PKCS12&#34;&gt;PKCS #12&lt;/a&gt;), I figured it
would be best to create an SSLSession backed directly by an X509Certificate
and PrivateKey loaded from the PEM file.&lt;/p&gt;

&lt;p&gt;I wasn&amp;rsquo;t able to find any other examples of a PEM backed Java KeyStore, so
&lt;a href=&#34;http://git.fedorahosted.org/git?p=thumbslug.git;a=blob_plain;f=
src/main/java/org/candlepin/thumbslug/ssl/PEMx509KeyManager.java;hb=HEAD&#34;&gt;here is mine&lt;/a&gt;
(&lt;a href=&#34;https://gist.github.com/1391823&#34;&gt;backup&lt;/a&gt;), and the &lt;a href=&#34;http:
//git.fedorahosted.org/git?p=thumbslug.git;a=blob;f=src/main/java/org/candlepi
n/thumbslug/ssl/SslContextFactory.java;h=b8791e0b4910c2f1adf347015df5110b2f6ac
9bb;hb=HEAD#l102&#34;&gt;code that uses it&lt;/a&gt; (&lt;a href=&#34;https://gist.github.com/1391824&#34;&gt;backup&lt;/a&gt;). Since PEM is
still widely used (by OpenSSL, for example), hopefully others can make use of
this.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>HOWTO Make a USB Y Cable for Host Mode</title>
      <link>http://jbowes.github.io/2011/11/21/howto-make-usb-y-cable-for-host-mode</link>
      <pubDate>Mon, 21 Nov 2011 10:50:00 -0400</pubDate>
      
      <guid>http://jbowes.github.io/2011/11/21/howto-make-usb-y-cable-for-host-mode</guid>
      <description>&lt;p&gt;Many smartphones or tablets support USB host mode (or On The Go mode) with an
adapter. Unfortunately, a lot of those devices don&amp;rsquo;t supply power to their
client USB devices; you can&amp;rsquo;t just plug a host mode adapter into an HP
TouchPad, for example, then plug a keyboard into the host mode adapter, and
expect everything to work.&lt;/p&gt;

&lt;p&gt;I put up a video on youtube explaining how to build and use a USB Y cable to
inject power to the client devices. If you&amp;rsquo;d like, you can &lt;a href=&#34;http://www.youtube.com/watch?v=p10LgZFIawo&#34;&gt;watch it
here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>An Access Logger for Netty and HTTP</title>
      <link>http://jbowes.github.io/2011/07/05/access-logger-for-netty-and-http</link>
      <pubDate>Tue, 05 Jul 2011 09:01:00 -0300</pubDate>
      
      <guid>http://jbowes.github.io/2011/07/05/access-logger-for-netty-and-http</guid>
      <description>&lt;p&gt;We needed to do &lt;a href=&#34;http://en.wikipedia.org/wiki/Common_Log_Format&#34; title=&#34;Common
Log Format&#34;&gt;CLF&lt;/a&gt; style HTTP access logging for
&lt;a href=&#34;https://fedorahosted.org/candlepin/&#34; title=&#34;Candlepin&#34;&gt;Thumbslug&lt;/a&gt;, which is
implemented in Java + &lt;a href=&#34;http://www.jboss.org/netty&#34; title=&#34;Netty&#34;&gt;Netty&lt;/a&gt;. I couldn&amp;rsquo;t
find any code to do this with a quick google search, so I wrote my own. If you
need such a thing, try &lt;a href=&#34;http://git.fedorahosted.org/git/?p=thumbslug.git
;a=blob;f=src/main/java/org/candlepin/thumbslug/HttpRequestLogger.java&#34;&gt;here&lt;/a&gt; or
&lt;a href=&#34;https://gist.github.com/1065230&#34; title=&#34;Github gist&#34;&gt;here (backup)&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Measuring Network Speeds with Netcat and Dd</title>
      <link>http://jbowes.github.io/2010/10/13/measuring-network-speeds-with-netcat</link>
      <pubDate>Wed, 13 Oct 2010 06:18:00 -0300</pubDate>
      
      <guid>http://jbowes.github.io/2010/10/13/measuring-network-speeds-with-netcat</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve seen a few posts on the web about testing your network speeds with
netcat, but they all seem to not work with recent versions of netcat.&lt;/p&gt;

&lt;p&gt;On one machine, run:&lt;br /&gt;
&lt;code&gt;
nc -v -l 2222 &amp;gt; /dev/null  
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;(Make sure you&amp;rsquo;re not blocking connections to 2222!)&lt;/p&gt;

&lt;p&gt;On a second machine, run:&lt;br /&gt;
&lt;code&gt;
dd if=/dev/zero bs=1024K count=512 | nc -v $IP_OF_FIRST_MACHINE 2222  
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;dd will give you your speed:&lt;br /&gt;
&lt;code&gt;
536870912 bytes (537 MB) copied, 4.87526 s, 117 MB/s  
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Yay, gigabit!&lt;/p&gt;

&lt;p&gt;_&lt;br /&gt;
ymmv, test with /dev/zero at your own risk. Speak with your NOC before
starting any network infrastructure changes.&lt;br /&gt;
_&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Converting SVN Commits to Git Patches</title>
      <link>http://jbowes.github.io/2009/06/23/converting-svn-commits-to-git-patches</link>
      <pubDate>Tue, 23 Jun 2009 03:29:00 -0300</pubDate>
      
      <guid>http://jbowes.github.io/2009/06/23/converting-svn-commits-to-git-patches</guid>
      <description>&lt;p&gt;In case you find yourself in need of a way to turn an svn revision into a git
patch that can be applied with &amp;lsquo;git am&amp;rsquo;, keeping the commit message and
authorship information, here&amp;rsquo;s a script I used recently:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/bin/python  
#  
# svnrev2git.py - Convert an SVN revsion to a Git patch.  
#  
# Author: James Bowes &amp;lt;jbowes@repl.ca&amp;gt;  
#  
# Usage:  
#   $&amp;gt; cd my-svn-repo  
#   $&amp;gt; python svnrev2git.py [AUTHORS_FILE] [REV_RANGE | REVSION [REVISION..]]  
#  
#   AUTHORS_FILE - a CSV of  svn username, full name, email  
#   REV_RANGE - an svn revision range, like 100-700  
#   REVISION - a single svn revision  
#  
#   You may specify either a revision range, or a series of individual  
#   svn revisions  
#  
# Output:  
#   A series of git style patch files, one per svn revision, which can then be  
#   applied with &#39;git am&#39;  
#  
# Why use this instead of &#39;git svn&#39;?  
#   I had done a large repo conversion via git svn where we wanted no downtime  
#   for the switchover. After removing the git svn specific info from our git  
#   commits, I used this tool to bring in commits from svn, keeping svn and git  
#   in sync, until we were ready to switch.  

import sys  
import commands  

def svnlog_to_gitlog(authors, svnlog):  

    lines = svnlog.split(&amp;quot;\n&amp;quot;)  
    lines = lines[1:-1]  

    metainfo = lines[0].split(&amp;quot; | &amp;quot;)  
    subject = lines[2]  
    description = lines[3:]  

    author = metainfo[1]  

    day = metainfo[2].split(&amp;quot;(&amp;quot;)[1][:-1]  
    time = metainfo[2].split(&amp;quot; &amp;quot;)[1]  
    offset = metainfo[2].split(&amp;quot; &amp;quot;)[2]  

    gitlog = []  
    gitlog += [&amp;quot;From: %s &amp;lt;%s&amp;gt;&amp;quot; % authors[author]]  
    gitlog += [&amp;quot;Date: %s %s %s&amp;quot; % (day, time, offset)]  
    gitlog += [&amp;quot;Subject: [PATCH] %s&amp;quot; % subject]  
    gitlog += [&amp;quot;&amp;quot;]  
    gitlog += description  
    gitlog += [&amp;quot;&amp;quot;]  

    return &#39;\n&#39;.join(gitlog)  

def svndiff_to_gitdiff(svndiff):  
    lines = svndiff.split(&amp;quot;\n&amp;quot;)  

    gitdiff = []  
    for line in lines:  
        if line.startswith(&amp;quot;--- &amp;quot;):  
            gitdiff.append(&amp;quot;--- a/&amp;quot; + line[4:])  
        elif line.startswith(&amp;quot;+++ &amp;quot;):  
            gitdiff.append(&amp;quot;+++ b/&amp;quot; + line[4:])  
        else:  
            gitdiff.append(line)  

    return &#39;\n&#39;.join(gitdiff)  

def make_patch(authors, rev):  
    out = commands.getoutput(&amp;quot;svn log -c %s .&amp;quot; % rev)  

    if len(out.split(&amp;quot;\n&amp;quot;)) &amp;lt; 2:  
        print &amp;quot;skipping r%s&amp;quot; % rev  
        return  

    patch = open(rev + &amp;quot;.patch&amp;quot;, &#39;w&#39;)  
    patch.write(svnlog_to_gitlog(authors, out))  
    patch.write(&amp;quot;---\n\n&amp;quot;)  

    out = commands.getoutput(&amp;quot;svn diff -c %s .&amp;quot; % rev)  
    patch.write(svndiff_to_gitdiff(out))  

    patch.write(&amp;quot;\n---\n&amp;quot;)  
    patch.write(&amp;quot;svnrev2git.py\n&amp;quot;)  

    patch.close()  
    print &amp;quot;wrote %s.patch&amp;quot; % rev  

def main(args):  
    author_file = open(args[0])  
    authors = {}  

    print &amp;quot;loading authors&amp;quot;  
    for line in author_file.readlines():  
        parts = line.strip().split(&amp;quot;, &amp;quot;)  
        authors[parts[0]] = (parts[1], parts[2])  

    author_file.close()  

    revs = args[1:]  

    if len(revs) == 1 and &#39;-&#39; in revs[0]:  
        start, end = revs[0].split(&#39;-&#39;)  
        start = int(start)  
        end = int(end)  
        revs = [str(x) for x in range(start, end + 1)]  

    for rev in revs:  
        make_patch(authors, rev)  

if __name__ == &amp;quot;__main__&amp;quot;:  
    main(sys.argv[1:])
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>